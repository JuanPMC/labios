cmake_minimum_required(VERSION 3.5)
project(porus_main)

set(CMAKE_CXX_STANDARD 11)
include_directories(external_libs/)
#define ones we have installed
set(MEMCACHED true)
set(NATS true)
set(MPI true)
#set(ROCKS true)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDEBUG -g")

set(CMAKE_MODULE_PATH )
set(COMMON_SRC "" external_libs/cereal/cereal.hpp src/common/enumerations.h src/common/exceptions.h src/common/data_structures.h src/common/data_manager/data_manager.cpp src/common/data_manager/data_manager.h src/common/client_interface/DistributedHashMap.cpp src/common/client_interface/DistributedHashMap.h src/common/utilities.h src/common/metadata_manager/metadata_manager.cpp src/common/metadata_manager/metadata_manager.h src/common/constants.h src/System.cpp src/System.h src/common/task_handler/task_handler.cpp src/common/task_handler/task_handler.h src/common/client_interface/DistributedHashMap.cpp src/common/client_interface/DistributedHashMap.h src/common/client_interface/DistributedQueue.cpp src/common/client_interface/DistributedQueue.h src/common/external_clients/serialization_manager.cpp src/common/external_clients/serialization_manager.h src/common/external_clients/RocksDBImpl.cpp src/common/external_clients/RocksDBImpl.h src/common/external_clients/MemcacheDImpl.cpp src/common/external_clients/MemcacheDImpl.h src/common/external_clients/NatsImpl.cpp src/common/external_clients/NatsImpl.h)
set(PORUS_LIB_SRC ${COMMON_SRC} src/lib/driver.cpp src/lib/posix.cpp src/lib/posix.h src/lib/mpi.cpp)
set(PORUS_CLIENT_SRC  ${COMMON_SRC} "src/client/main.cpp" src/client/PorusClient.cpp src/client/PorusClient.h src/common/exceptions.h src/lib/mpi.h include/porus.h )
set(PORUS_SERVER_SRC  ${COMMON_SRC} "src/system_manager/main.cpp")
set(PORUS_TS_SRC  ${COMMON_SRC} src/task_scheduler/main.cpp src/task_scheduler/solver/DPSolver.cpp src/task_scheduler/solver/DPSolver.h src/task_scheduler/solver/solver.h src/task_scheduler/solver/GreedySolver.cpp src/task_scheduler/solver/GreedySolver.h src/task_scheduler/solver/knapsack.cpp)
set(PORUS_WM_SRC  ${COMMON_SRC} "src/worker_manager/main.cpp")
set(PORUS_WS_SRC  ${COMMON_SRC} "src/worker/main.cpp")
set(PORUS_W_PROG_STATS_SRC  ${COMMON_SRC} src/worker/main.cpp src/worker/program_repo/statistics.h src/worker/program_repo/statistics.cpp)

if(DEFINED MPI)
    find_package(MPI REQUIRED)
    set(CMAKE_CXX_COMPILE_FLAGS ${CMAKE_CXX_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
    set(CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS})
    include_directories(${MPI_INCLUDE_PATH})
endif()
if(DEFINED MEMCACHED)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L/opt/install/lib -lmemcached -DMEMCACHED_P")
endif()
if(DEFINED ROCKS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DROCKS_P")
    include_directories(/home/hariharan/Downloads/rocksdb/include)
endif()
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w")


add_executable(porus_lib ${PORUS_LIB_SRC})
add_executable(porus_client ${PORUS_CLIENT_SRC})
add_executable(porus_server ${PORUS_SERVER_SRC})
add_executable(porus_task_scheduler ${PORUS_TS_SRC})
add_executable(porus_worker_manager ${PORUS_WM_SRC})
add_executable(porus_worker ${PORUS_WS_SRC})
add_executable(porus_worker_stats ${PORUS_W_PROG_STATS_SRC})

if(DEFINED MPI)
    target_link_libraries(porus_lib ${MPI_LIBRARIES})
    target_link_libraries(porus_client ${MPI_LIBRARIES})
    target_link_libraries(porus_server ${MPI_LIBRARIES})
    target_link_libraries(porus_task_scheduler ${MPI_LIBRARIES})
    target_link_libraries(porus_worker_manager ${MPI_LIBRARIES})
    target_link_libraries(porus_worker ${MPI_LIBRARIES})
    target_link_libraries(porus_worker_stats ${MPI_LIBRARIES})
endif()
if(DEFINED ROCKS)
    target_link_libraries(porus_lib -lrocksdb)
    target_link_libraries(porus_client -lrocksdb)
    target_link_libraries(porus_server -lrocksdb)
    target_link_libraries(porus_task_scheduler -lrocksdb)
    target_link_libraries(porus_worker_manager -lrocksdb)
    target_link_libraries(porus_worker -lrocksdb)
    target_link_libraries(porus_worker_stats -lrocksdb)
endif()
if(DEFINED MEMCACHED)
    target_link_libraries(porus_lib memcached)
    target_link_libraries(porus_client memcached)
    target_link_libraries(porus_server memcached)
    target_link_libraries(porus_task_scheduler memcached)
    target_link_libraries(porus_worker_manager memcached)
    target_link_libraries(porus_worker memcached)
    target_link_libraries(porus_worker_stats memcached)
endif()
if(DEFINED NATS)
    target_link_libraries(porus_lib -lnats)
    target_link_libraries(porus_client -lnats)
    target_link_libraries(porus_server -lnats)
    target_link_libraries(porus_task_scheduler -lnats)
    target_link_libraries(porus_worker_manager -lnats)
    target_link_libraries(porus_worker -lnats)
    target_link_libraries(porus_worker_stats -lnats)
endif()
target_link_libraries(porus_lib -pthread)
target_link_libraries(porus_client -pthread)
target_link_libraries(porus_server -pthread)
target_link_libraries(porus_task_scheduler -pthread)
target_link_libraries(porus_worker_manager -pthread)
target_link_libraries(porus_worker -pthread)
target_link_libraries(porus_worker_stats -pthread)


#[[target_link_libraries(porus_lib ${MPI_LIBRARIES} -pthread -lrocksdb -lnats memcached)
target_link_libraries(porus_client ${MPI_LIBRARIES} -pthread -lrocksdb -lnats memcached)
target_link_libraries(porus_server ${MPI_LIBRARIES} -pthread -lrocksdb -lnats memcached)
target_link_libraries(porus_task_scheduler ${MPI_LIBRARIES} -pthread -lrocksdb  -lnats memcached)
target_link_libraries(porus_worker_manager ${MPI_LIBRARIES} -pthread -lrocksdb -lnats memcached)
target_link_libraries(porus_worker ${MPI_LIBRARIES} -pthread -lrocksdb -lnats memcached)
    #worker programs
target_link_libraries(porus_worker_stats ${MPI_LIBRARIES} -pthread)]]