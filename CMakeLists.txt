cmake_minimum_required(VERSION 3.6)
project(porus)

include_directories(/usr/include)
include_directories(/home/anthony/Downloads/or-tools-master)
include_directories(/home/anthony/Downloads/or-tools-master/ortools/gen/)
include_directories(/home/anthony/Downloads/or-tools-master/ortools/lib/)
include_directories(/home/anthony/Downloads/or-tools-master/dependencies/sources/protobuf-3.3.0/src)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L/usr/local/lib/ -lmemcached")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L/home/anthony/Downloads/or-tools-master/lib -lortools")
# Require MPI for this project:
find_package(MPI REQUIRED)
set(CMAKE_CXX_COMPILE_FLAGS ${CMAKE_CXX_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
set(CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS})
include_directories(${MPI_INCLUDE_PATH})

set(WORKER_SRC worker/src/worker_service.cpp)
set(COMMON_SRC src/common/utils/google_tools/city.h src/common/utils/google_tools/city.cc src/common/utils/google_tools/concurrent_queue_lock_free/lock_free_buffer_queue.h src/common/utils/google_tools/concurrent_queue_lock_free/queue_base.h src/common/utils/Timer.h src/common/utils/Timer.cpp include/config_manager.cpp include/config_manager.h src/common/constants.h src/common/return_codes.h src/common/components/api_request.h src/common/components/memtable.cpp src/common/components/memtable.h src/common/porus_system.h src/common/porus_system.cpp src/common/components/api_response.h src/common/components/enumerators.h src/core/worker_manager/worker_manager.cpp src/core/worker_manager/worker_manager.h src/common/components/worker.h)
set(TASK_SCHEDULER_SRC src/core/task_scheduler/ts_factory.cpp src/core/task_scheduler/ts_factory.h src/core/task_scheduler/abstract_ts.cpp src/core/task_scheduler/abstract_ts.h src/core/task_scheduler/random_selection_ts.cpp src/core/task_scheduler/random_selection_ts.h src/core/task_scheduler/active_worker_ts.cpp src/core/task_scheduler/active_worker_ts.h src/core/task_scheduler/file_location_ts.cpp src/core/task_scheduler/file_location_ts.h)
set(SORT_SRC program_repository/src/sort.cpp)
set(SOURCE_FILES main.cpp include/porus.h src/api.cpp src/api.h src/posix.cpp src/posix.h src/core/cache_manager/cache_manager.cpp src/core/cache_manager/cache_manager.h  src/core/metadata_manager/mdm_factory.cpp src/core/metadata_manager/mdm_factory.h src/core/metadata_manager/abstract_mdm.cpp src/core/metadata_manager/abstract_mdm.h src/core/metadata_manager/posix_mdm.cpp src/core/metadata_manager/posix_mdm.h src/core/request_handler/posix_rh_factory.cpp src/core/request_handler/posix_rh_factory.h src/core/request_handler/abstract_rh.cpp src/core/request_handler/abstract_rh.h src/core/request_handler/posix_rh_two_sided.cpp src/core/request_handler/posix_rh_two_sided.h  src/core/prefetcher/prefetcher_factory.cpp src/core/prefetcher/prefetcher_factory.h src/core/prefetcher/abstract_prefetcher.cpp src/core/prefetcher/abstract_prefetcher.h src/core/prefetcher/posix_prefetcher.cpp src/core/prefetcher/posix_prefetcher.h src/core/task_handler/sync_th.cpp src/core/task_handler/sync_th.h src/core/task_handler/th_factory.cpp src/core/task_handler/th_factory.h src/core/task_handler/abstract_th.cpp src/core/task_handler/abstract_th.h src/core/task_handler/async_th.cpp src/core/task_handler/async_th.h src/mpi_init.cpp src/mpi_init.h  src/core/cache_manager/memcached_client.cpp src/core/cache_manager/memcached_client.h  src/core/request_handler/posix_rh.cpp src/core/request_handler/posix_rh.h)

set(LIB_SRC ${TASK_SCHEDULER_SRC} ${COMMON_SRC} ${SOURCE_FILES})
set(WORKER_SRC ${WORKER_SRC} ${COMMON_SRC} ${TASK_SCHEDULER_SRC})
add_executable(porus ${LIB_SRC})
target_link_libraries(porus memcached ortools -lpthread )
target_link_libraries(porus ${MPI_LIBRARIES})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY executables)
add_executable(worker_service ${WORKER_SRC})
target_link_libraries(worker_service ${MPI_LIBRARIES})
target_link_libraries(worker_service memcached ortools -lpthread)
add_executable(sort ${SORT_SRC})